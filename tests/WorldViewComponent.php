<?php
namespace PatternSeek\ComponentView\Test;

use PatternSeek\ComponentView\AbstractViewComponent;
use PatternSeek\ComponentView\TwigTemplate;
use PatternSeek\ComponentView\ViewComponentResponse;

/**
 * Class WorldViewComponent
 * @package PatternSeek\ComponentView\Test
 */
class WorldViewComponent extends AbstractViewComponent{

    protected function doUpdate( array $inputs ){

        $this->testInputs(
            [
                'name'=>['string'],
                'intRequired'=>['integer']
            ],
            $inputs
        );

        // Used by jsonMultiplyHandler()
        $this->state['intRequired'] = $inputs['intRequired'];

        $templateInputs = $inputs; // normally this would be generated by some processing
        return $templateInputs;
    }

    protected function jsonMultiplyHandler( $inputs ){
        $this->testInputs( ['multiplier'=>['int']], $inputs );
        $resInt = $this->state['intRequired'] * $inputs['multiplier'];
        return new ViewComponentResponse( "application/json", json_encode( ['result'=>$resInt] ) );
    }

    protected function setStateHandler( $inputs ){
        $this->testInputs( ['something'=>['int']], $inputs );
        $this->state['testProp'] = $inputs['something'];
        return new ViewComponentResponse( "text/plain", "OK" );
    }

    protected function getStateHandler( $inputs ){
        return new ViewComponentResponse( "text/plain", $this->state['testProp'] );
    }

    /**
     * Load or configure the component's template as necessary
     *
     * @return void
     */
    protected function setupTemplate()
    {
        $tplTwig = <<<EOS
World. From: {{inputs.name}}
EOS;
        $this->template = new TwigTemplate( $this, $tplTwig );
    }
}